name: devops

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch: {}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}

      - name: Build + Test
        run: |
          if [ -x ./mvnw ]; then ./mvnw -B clean verify; else mvn -B clean verify; fi

      - name: Static Analysis
        run: |
          if [ -x ./mvnw ]; then ./mvnw -B checkstyle:check com.github.spotbugs:spotbugs-maven-plugin:check; \
          else mvn -B checkstyle:check com.github.spotbugs:spotbugs-maven-plugin:check; fi

  build-image:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/devops-exercise
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }} 
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

 
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:main
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: Set IMAGE_TAG output
        id: meta
        run: echo "image_tag=${{ env.IMAGE_NAME }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

  deploy:
    needs: build-image
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: [self-hosted, Windows, X64]
    env:
      IMAGE_TAG: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0    
          clean: true
          ref: main

      - name: Escribir .env
        shell: powershell
        run: |
          "JWT_SECRET_B64=${{ secrets.JWT_SECRET_B64 }}" | Out-File -Encoding ASCII .env
          "IMAGE_TAG=${{ env.IMAGE_TAG }}" | Out-File -Encoding ASCII -Append .env   

      - name: Desplegar 
        shell: powershell
        run: |
          $podman = "C:\Program Files\RedHat\Podman\podman.exe"
          $ErrorActionPreference = 'Stop'
          Push-Location $env:GITHUB_WORKSPACE

          
          & $podman info | Out-Null
          & $podman pull $env:IMAGE_TAG

          # podman instalado
          $useNative = $true
          try { & $podman compose version | Out-Null } catch { $useNative = $false }

          if ($useNative) {
            # ---- RUTA NATIVA ----
            & $podman compose -f .\docker-compose.yml down
            if ($LASTEXITCODE -ne 0) { $LASTEXITCODE = 0 }
            & $podman compose -f .\docker-compose.yml up -d
          } else {
            # ---- RUTA PYTHON ---- (sin usar ?. )
            $pyCmd = Get-Command python -ErrorAction SilentlyContinue
            if ($pyCmd) { $py = $pyCmd.Source } else { $py = "C:\Python311\python.exe" }

            $venv = "$env:RUNNER_TEMP\venv"
            $env:PYTHONUNBUFFERED = "1"

            & $py -m venv $venv
            & "$venv\Scripts\python.exe" -m pip install --upgrade pip podman-compose

            $pc = "$venv\Scripts\podman-compose.exe"

            & $pc -f .\docker-compose.yml --no-ansi down
            if ($LASTEXITCODE -ne 0) { $LASTEXITCODE = 0 }
            & $pc -f .\docker-compose.yml --no-ansi up -d
          }

          Start-Sleep -Seconds 3

          Write-Host "=== PODMAN COMPOSE LS ==="
          & $podman compose ls

          Write-Host "=== PODMAN PS (RUNNING) ==="
          & $podman ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

          Write-Host "=== PODMAN PS -A (INCLUIDOS EXITED) ==="
          & $podman ps -a --format "table {{.Names}}\t{{.Status}}\t{{.CreatedAt}}"

         
          $exited = & $podman ps -a --format "{{.Names}} {{.Status}}" | Select-String "Exited"
          if ($exited) {
            Write-Host "=== LOGS DE SERVICIOS (tail=200) ==="
            $names = @()
            foreach ($line in $exited) { $names += ($line.ToString().Split()[0]) }
            foreach ($n in $names) {
              Write-Host "--- LOGS: $n ---"
              & $podman logs --tail=200 $n
            }
            throw "Algunos servicios salieron con 'Exited'"
          }

          Pop-Location
