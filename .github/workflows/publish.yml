name: CI-CD

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {}   

jobs:
  build-image:
    needs: build-test
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/devops-exercise
    outputs:
      image_tag: ${{ steps.meta.outputs.IMAGE_TAG }}   # <-- define output del job
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:main
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
      - name: Set IMAGE_TAG output
        id: meta
        run: echo "IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-image
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: [self-hosted, Windows, X64]
    env:
      IMAGE_TAG: ${{ needs.build-image.outputs.image_tag }}   # <-- ahora sÃ­ llega el tag
    steps:
      - uses: actions/checkout@v4
      # (sigue abajo con el Arreglo 2)


  deploy:
    needs: build-image        # o build-test si no haces imagen
    if: github.ref == 'refs/heads/main'
    runs-on: [self-hosted, Windows, X64]

    steps:
      - uses: actions/checkout@v4

      - name: Escribir .env con secreto y tag
        shell: powershell
        run: |
          "JWT_SECRET_B64=${{ secrets.JWT_SECRET_B64 }}" | Out-File -Encoding ASCII .env
          "IMAGE_TAG=${{ needs.build-image.outputs.meta.IMAGE_TAG }}" | Out-File -Encoding ASCII -Append .env
          Get-Content .env

      - name: Compose con podman
        shell: powershell
        run: |
          $podman = "C:\Program Files\RedHat\Podman\podman.exe"
          & $podman login ghcr.io --username $env:GITHUBACTOR --password $env:GITHUB_TOKEN
          & $podman pull $env:IMAGE_TAG
          & $podman compose down
          if ($LASTEXITCODE -ne 0) { Write-Host "no stack to stop"; $LASTEXITCODE = 0 }
          & $podman compose up -d