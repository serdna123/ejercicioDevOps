name: devops

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch: {}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
      - name: Build + Test
        run: mvn -B clean verify
      - name: Static Analysis
        run: ./mvnw -B checkstyle:check com.github.spotbugs:spotbugs-maven-plugin:check


  build-image:
    needs: build-test
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/devops-exercise
    outputs:
      image_tag: ${{ steps.meta.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DEVOPS_PWD }}
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:main
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
      - name: Set IMAGE_TAG output
        id: meta
        run: echo "IMAGE_TAG=${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
  deploy:
    needs: build-image
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: [self-hosted, Windows, X64]
    env:
      IMAGE_TAG: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Escribir .env
        shell: powershell
        run: |
          "JWT_SECRET_B64=${{ secrets.JWT_SECRET_B64 }}" | Out-File -Encoding ASCII .env
          "IMAGE_TAG=${{ env.IMAGE_TAG }}" | Out-File -Encoding ASCII -Append .env
          Get-Content .env

      - name: Desplegar con podman
        shell: powershell
        run: |
          $python = "C:\Python311\python.exe"
          $podman = "C:\Program Files\RedHat\Podman\podman.exe"
          $moddir = "$env:RUNNER_TEMP\pdc"

          & $python -m pip install --upgrade pip
          if ($LASTEXITCODE -ne 0) { throw "pip upgrade failed" }

          & $python -m pip install podman-compose -t $moddir
          if ($LASTEXITCODE -ne 0) { throw "pip install podman-compose failed" }

          $env:PYTHONPATH = $moddir

          & $python -m podman_compose --version

          # Pull de la imagen versionada GHCR
          & $podman pull $env:IMAGE_TAG
          if ($LASTEXITCODE -ne 0) { throw "podman pull failed" }

          # DOWN
          & $python -m podman_compose down
          if ($LASTEXITCODE -ne 0) { Write-Host "no stack to stop"; $LASTEXITCODE = 0 }

          # UP 
          & $python -m podman_compose up -d
          if ($LASTEXITCODE -ne 0) { throw "compose up failed" }

          # Ver contenedores
          & $podman ps