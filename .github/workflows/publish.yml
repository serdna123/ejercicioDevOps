name: devops

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]
  workflow_dispatch: {}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}

      - name: Build + Test
        run: |
          if [ -x ./mvnw ]; then ./mvnw -B clean verify; else mvn -B clean verify; fi

      - name: Static Analysis
        run: |
          if [ -x ./mvnw ]; then ./mvnw -B checkstyle:check com.github.spotbugs:spotbugs-maven-plugin:check; \
          else mvn -B checkstyle:check com.github.spotbugs:spotbugs-maven-plugin:check; fi

  build-image:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/devops-exercise
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }} 
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

 
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:main
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: Set IMAGE_TAG output
        id: meta
        run: echo "image_tag=${{ env.IMAGE_NAME }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

  deploy:
    needs: build-image
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: [self-hosted, Windows, X64]
    env:
      IMAGE_TAG: ${{ needs.build-image.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0    
          clean: true
          ref: main

      - name: Escribir .env
        shell: powershell
        run: |
          "JWT_SECRET_B64=${{ secrets.JWT_SECRET_B64 }}" | Out-File -Encoding ASCII .env
          "IMAGE_TAG=${{ env.IMAGE_TAG }}" | Out-File -Encoding ASCII -Append .env   

      - name: Desplegar con podman compose (detached, sin ANSI)
        shell: pwsh
        timeout-minutes: 10
        run: |
          $podman = "C:\Program Files\RedHat\Podman\podman.exe"
          $ErrorActionPreference = 'Stop'
          # Asegura que la VM/servicio esté arriba (si aplica)
          & $podman info | Out-Null

          # Pull explícito (para fallar rápido si hay problema de red)
          & $podman pull $env:IMAGE_TAG

          # Down sin bloquear si no existe
          & $podman compose --ansi never down; if ($LASTEXITCODE -ne 0) { $LASTEXITCODE = 0 }

          # Up DETACHED y sin ANSI para evitar colgues en PowerShell
          & $podman compose --ansi never up -d

          # Listar contenedores y salir
          & $podman ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          Write-Host "Deploy step finished OK"
